[[_maintaining_gh_project]]
=== 維護專案
現在我們可以舒適自在的對一個專案做出貢獻了，所以我們來看看另一個面向吧：建立、維護以及管理一個專案吧。

==== 建立一個新倉儲

來建立一個拿來分享我們的原始碼的倉儲吧。
首先點擊主控面板右邊的「New Repository」；或是點擊 <<_new_repo_dropdown>> 裡展示的：頂端工具列裡，你的使用者名稱右手邊的 `+`。

.「Your Repositories」區塊
image::images/newrepo.png[「Your Repositories」區塊]

[[_new_repo_dropdown]]
.「New repository」 下拉式選單.
image::images/new-repo.png[「New repository」 下拉式選單]

這會把你帶到 「new repository」表單的所在頁面：

.「new repositroy」表單
image::images/newrepoform.png[「new repositroy」表單]

你只需要提供專案名稱，因為剩餘的欄位是完全選擇性的。
現在，你只要點下「Create Repository」鈕，然後碰的一聲——你就擁有了一個在 GitHub 上名為 `<user>/<project_name>` 的全新倉儲了。

因為你這個倉儲還沒有任何原始碼在裡面，GitHub 會展示一份關於如何建立一個全新的 Git 倉儲或是連結一個舊有 Git 專案的指引。
我們在這邊不會對這這部份多做描述，如果你需要回憶一下，去看看 <<_git_basics_chapter>> 吧。

現在你的專案被託管在 GitHub 上了，你可以把網址給任何你想要分享專案的人。
所有人都可以透過 `https://github.com/<user>/<project_name>` 以 HTTP 方式存取，或是透過 `git@github.com:<user>/<project_name>` 以 SSH 方式存取。
Git 可以透過上述兩種途徑來推送及拉取資料，但所有操作都會透過對其連結的使用的驗證資訊來做存取控管。

[NOTE]
====
通常公開專案會傾向於分享基於 HTTP 的網址，因為這樣沒有 GitHub 帳戶的使用者也能夠對其存取來拓製專案。如果你給了 SSH 版本的網址，使用者必須建立一個帳戶並加入 SSH key 才能存取專案。而且 HTTP 網址就是他們會貼在瀏覽器裡來瀏覽專案的網址。
====

==== 增加協作者
你必須要把和你合作的人加入「協作者」，這樣他們才能對專案提交變更。
如果 Ben、Jeff 和 Louise 都有 GitHub 帳戶，而且你想要給他們推送變更的權限，你可以把他們加入你們專案。
把他們加入專案後，他們可以對專案「推送」變更，這意味著他們有這專案及專案的 Git 倉儲的讀寫權限。

點擊右側欄最下面的「Settings」連結。

.倉儲設定連結。
image::images/reposettingslink.png[倉儲設定連結。]

接著選擇右邊選單的「Collaborators」。
然後在文字方塊裡輸入使用者名稱，按下「Add collaborator」。
你可以一直重複這個步驟來賦予所有你想要的人存取權限。
如果你要收回權限，只要點一下那個使用者右手邊的「X」即可。

.倉儲協作者
image::images/collaborators.png[倉儲協作者區]

==== 管理 Pull Requests

現在你擁有一個裡面有些原始碼的專案，同時也可能會有些擁有推送權限的協作者。然後我們來看看當你收到 Pull Request 時要如何處理吧。

Pull Requests 可能是來自某個 fork 裡的分支，或是同個倉儲裡的某個分支。兩者之間只差在，來自其他 fork 的 PR 通常你沒有對他們分支的推送權限，他們也沒有；而內部 PR 就是雙方都能存取分支。

關於這些東西的範例，我們就在這邊假設你是「tonychacon」而且你建立了一個名叫「fade」的 Arduino 原始碼專案吧。

[[_email_notifications]]
===== 電郵通知

有人對你的原始碼做了些變更，然後發給你一個 Pull Request。這時你應該會收到像 <<_email_pr>> 這樣的郵件。

[[_email_pr]]
.對於新的 Pull Request 的電郵通知。
image::images/maint-01-email.png[Pull Request 電郵通知]

這電郵裡面有些值得注意的東西。他會給你一個簡易的差異狀態——一個在這 Pull Request 之中被變更的檔案清單，以及變動量。內附一個連往這個 PR 在 GitHub 上的連結。同時也會給你一些可以從指令列操作的網址。

你可能會注意到這行指令 `git pull <url> patch-1`，這行指令是可以在不用增加遠端的情況下合併一個遠端分支的簡易方式。我們曾在 <<_checking_out_remotes>> 簡短的提過。你可以去建立並切換至主題分支，然後執行這條指令以合併 Pull Request 中的變更。

其他有趣的網址就是 `.diff` 和 `.patch`，你或許猜的到，他們分別提供 Pull Request 的統合差異和系列補綴。你可以以下述方式來做技術性的合併：

[source,console]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

===== 在 Pull Request 裡合作

就如我們在 <<_github_flow>> 提過的，你現在可以和建立 Pull Request 的人對談了。你可以針對某幾行原始碼提出評論、對一整個提交做評論或是對一整個 Pull Request 做評論，而且你在其中每個部分都可以使用 GitHub 風格的 Markdown。

每當有人在 Pull Request 裡留下評論時，你都會收到一份電郵通知，這樣你就能掌握整個 Pull Request 的動態。每次聽之都會附有連結連往 Pull Request 有活動的部分，同時你也可以直接回覆郵件以在 Pull Request 討論串中評論。

.包含在討論串中的電郵回覆。

image::images/maint-03-email-resp.png[電郵回覆]

當你覺得 PR 裡面的原始碼已經可以合併的時候，你可手動拉取，然後在本地端合併；或是用 `git pull <url> <branch>` 這個稍早看過的語法；也可以把那個 fork 加入成遠端之一之後再擷取並合併。

如果這只是個簡單的合併，你可以按下 GitHub 網站上的「Merge」按鈕來解決。這會做一個「非快進」的合併——即便是可以快進，仍會建立合併提交。這意味著，不論你在何種情況按下「Merge」，都會建立一個合併提交。如果你點了提示連結，GitHub 就會會提供你所有的資訊，就像你在 <<_merge_button>> 看到的一樣。


[[_merge_button]]
.Merge 按鈕和手動合併 Pull Request 的指引。
.Merge button and instructions for merging a Pull Request manually.
image::images/maint-02-merge.png[Merge 按鈕]

如果你決定不要合併這個 Pull Request，你只需要關閉這個  Pull Request 即可，同時建立這個 Pull Request 的人也會收到通知。

[[_pr_refs]]
===== Pull Request 參照
如果你要處理 *非常多* 的 Pull Request 而且不想加入一堆的遠端或是一直做只會用到一次的拉取，關於這點 GitHub 提供了一個好用的小技巧給你用。這是個有點進階的技巧，所以我們會在 <<_refspec>> 提到更多的細節，不過還是非常的有用。

事實上 GitHub 會把倉儲的 Pull Request 當成伺服器上的假分支。預設情況下你不會在拓製的時候取得它們，但他們還是以隱藏的狀態存在著而且你可以用非常簡單的方式取得它們。

為了展示這個事實，我們要使用一個比較低階的指令（通常會被稱作「底層」指令，關於這點我們會在 <<_plumbing_procelain>> 再做詳細描述）—— `ls-remote`。這指令通常不會在日常的 Git 操作使用，但在展現伺服器上的所有參照是非常有用的。

如果對我們之前的「blink」倉儲使用這條指令，我們會得到在伺服器上這個倉儲裡所有的分支、標籤和其他各種參照的清單。

[source,console]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

當然，如果你在你的倉儲裡使用 `git ls-remote origin` 或是對其他任一個想確認的遠端使用，你會得到一個與這類似的結果。

如果你的倉儲是在 GItHub 上，而且有開放中的 Pull Request；你會看到一些以 `refs/pull/` 開頭的參照。它們基本上也是分支，但是因為他們不是以 `refs/heads` 起頭，所以你一般來說不會在拓製或擷取時從伺服器下載到他們——擷取的過程會忽略它們。

每個 Pull Request 都會有兩個參照——以 `/head` 結尾的是對應到目前 Pull Request 分支的最後一個提交。所以，如果有人在我們的倉儲開了一個 Pull Request，而且他的分支名稱叫做 `bug-fix` 還有它指向 `a5a775` 這個提交，在之後我們的倉儲裡並不會出現 `bug-fix` 這個分支，但我們會出現指向 `a5a775` 的 `pull/<pr#>/head`。這意味著我們可以非常簡單的直接拉取所有 Pull Request 分支，而非加一大堆的遠端來解決。

現在，你可以直接做些事––好比說擷取參考。


[source,console]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

這告訴了 Git：「連結到名為 `origin` 的遠端，並下載名為  `refs/pull/958/head` 的參考。」
Git 很樂意的照做了，之後下載了所有建立這個參考的必要資訊，之後就在 `.git/FETCH_HEAD` 裡放了一個指向你所需要的提交的指針。
你可以接著在你想要測試的分支裡執行 `git merge FETCH_HEAD`，不過這個合併提交的訊息可能會有點奇怪。
不過，如果你需要審閱「一大堆」的 Pull Request，這會顯得相當的枯燥乏味。

也是有辦法可以擷取「全部」的 Pull Request 的，而且可以在你每次連接到遠端時更新。
用你習慣的編輯器打開 `.git/config`，並且找到關於遠端 `origin` 的部份。
通常會長的像這樣：

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

以 `fetch =` 開頭的那行是個「參照規格」。
這是個本地端的 `.git` 資料夾裏面的名稱對應到遠端的方法。
這一段告訴 Git：「在遠端 `refs/heads` 之下的東西，要保存在本地倉儲的 `refs/remotes/origin` 之下。」
你可以編輯這個段落以加入其他的參照規格：

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

最後一行告訴 Git：「所有類似 `refs/pull/123/head` 的參照都會以 `refs/remotes/origin/pr/123` 的型式儲存在本地端。」
所以現在存檔，然後執行 `git fetch`：

[source,console]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

現在所有遠端的 Pull Request 都會以類似追蹤分支型式的參照出現在本端；他們是唯讀的，並且會在你做擷取的時候更新。
這讓在本地端測試 pull request 裡的程式碼變成超級簡單的事：

[source,console]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

你們其中某些比較眼尖的人可能已經注意到參照規格中遠端部份的尾巴的 `head`。
這同時也是 GitHub 端一個名為 `refs/pull/#/merge` 的參照，這代表著當你點下網站上的「Merge」鈕時會產生的提交。這讓你甚至可以在按下按鈕前測試合併結果。


===== 對應到 Pull Request 的 Pull Request
你不只可以對主要分支或是 `master` 分支建立 Pull Request，你也可以對這整個網絡裡的任意一個分支做同樣的事。事實上，你甚至可以對另外一個 Pull Request 做 Pull Request。

If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.

When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from. If you hit the ``Edit'' button at the right of that box you can change not only the branches but also which fork.

[[_pr_targets]]
.Manually change the Pull Request target fork and branch.
image::images/maint-04-target.png[PR targets]

Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.

==== Mentions and Notifications

GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.

In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.

.Start typing @ to mention someone.
image::images/maint-05-mentions.png[Mentions]

You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.

Once you post a comment with a user mention, that user will be notified. This means that this can be a really effective way of pulling people into conversations rather than making them poll. Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.

If someone gets mentioned on a Pull Request or Issue, they will be ``subscribed'' to it and will continue getting notifications any time some activity occurs on it. You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something. If you no longer wish to receive notifications, there is an ``Unsubscribe'' button on the page you can click to stop receiving updates on it.

.Unsubscribe from an Issue or Pull Request.
image::images/maint-06-unsubscribe.png[Unsubscribe]

===== The Notifications Page

When we mention ``notifications'' here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the ``Notification center'' tab from the settings page, you can see some of the options you have.

.Notification center options.
image::images/maint-07-notifications.png[Notification center]

The two choices are to get notifications over ``Email'' and over ``Web'' and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching.

====== Web Notifications

Web notifications only exist on GitHub and you can only check them on GitHub. If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<_not_center>>.

[[_not_center]]
.Notification center.
image::images/maint-08-notifications-page.png[Notification center]

If you click on that, you will see a list of all the items you have been notified about, grouped by project. You can filter to the notifications of a specific project by clicking on it's name in the left hand sidebar. You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifications in a project by clicking the checkmark at the top of the group. There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.

All of these tools are very useful for handling large numbers of notifications. Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.

====== Email Notifications

Email notifications are the other way you can handle notifications through GitHub. If you have this turned on you will get emails for each notification. We saw examples of this in <<_email_notification>> and <<_email_pr>>. The emails will also be threaded properly, which is nice if you're using a threading email client.

There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.

For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we will see the following among the information sent:

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

There are a couple of interesting things here. If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format. If this were an issue, for example, the `<type>` field would have been ``issues'' rather than ``pull''.

The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or ``Unsubscribe'' from the thread. That would be essentially the same as clicking the ``mute'' button on the web version of the notification or ``Unsubscribe'' on the Issue or Pull Request page itself.

It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.

==== Special Files

There are a couple of special files that GitHub will notice if they are present in your repository.

==== README

The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose. For example, it could be `README`, `README.md`, `README.asciidoc`, etc. If GitHub sees a README file in your source, it will render it on the landing page of the project.

Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project. This generally includes things like:

* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it

Since GitHub will render this file, you can embed images or links in it for added ease of understanding.

==== CONTRIBUTING

The other special file that GitHub recognizes is the `CONTRIBUTING` file. If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<_contrib_file>> when anyone starts opening a Pull Request.

[[_contrib_file]]
.Opening a Pull Request when a CONTRIBUTING file exists.
image::images/maint-09-contrib.png[Contributing notice]

The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project. This way people may actually read the guidelines before opening the Pull Request.

==== Project Administration

Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.

===== Changing the Default Branch

If you are using a branch other than ``master'' as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the ``Options'' tab.

[[_default_branch]]
.Change the default branch for a project.
image::images/maint-10-default-branch.png[Default branch]

Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.

===== Transferring a Project

If you would like to transfer a project to another user or an organization in GitHub, there is a ``Transfer ownership'' option at the bottom of the same ``Options'' tab of your repository settings page that allows you to do this.

[[_transfer_project]]
.Transfer a project to another GitHub user or Organization.
image::images/maint-11-transfer.png[Transfer]

This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.

Not only does this move the repository along with all it's watchers and stars to another place, it also sets up a redirect from your URL to the new place. It will also redirect clones and fetches from Git, not just web requests.
